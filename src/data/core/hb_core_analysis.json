{
  "name": "`hb",
  "subsystem": "core",
  "filename": "hb.erl",
  "content": "# `hb.erl` Core Application Analysis\r\n\r\n\n\n## Overview\r\n\r\n`hb.erl` is the central entry point and application module in HyperBEAM. It provides a high-level interface to the system, application initialization, server startup capabilities, wallet management, and debugging utilities. \r\n\r\nThe module's documentation offers the most comprehensive explanation of HyperBEAM's purpose and architecture in the codebase, describing it as \"a decentralized node implementing the Converge Protocol on top of Arweave\" that provides \"a computation layer for executing arbitrary logic on top of the network's data.\"\r\n\r\nWhile the module has fewer technical functions than the infrastructure modules we've previously analyzed, it serves as the conceptual glue that binds the system together and exposes the primary user-facing APIs for running and managing a HyperBEAM node.\r\n\r\n\n\n## Dependencies\r\n\r\n### Upstream Dependencies\r\n\r\nThe module has dependencies on:\r\n- `include/hb.hrl` for system-wide macros and definitions\r\n- `hb_opts` for configuration management\r\n- `hb_util` for utility functions\r\n- `hb_message` for message attestation \r\n- `hb_http` and `hb_http_server` for server functionality\r\n- `ar_wallet` for wallet management\r\n- Various other modules for specific functionality\r\n\r\n### Downstream Dependents\r\n\r\nAs the top-level module, `hb.erl` is likely referenced in start scripts, application configurations, and documentation. It exposes the primary API for starting and interacting with a HyperBEAM node, making it a critical interface for users and external systems.\r\n\r\n\n\n## Key Functions\r\n\r\n### System Initialization\r\n\r\n- `init/0`: Initializes system-wide settings for the HyperBEAM node\r\n- `build/0`: Hot-recompiles and loads the HyperBEAM environment\r\n\r\n### Server Startup\r\n\r\n- `start_mainnet/0`, `start_mainnet/1`: Starts a mainnet server without payments\r\n- `start_simple_pay/0`, `start_simple_pay/1`, `start_simple_pay/2`: Starts a server with a simple payment processor\r\n\r\n### Wallet Management\r\n\r\n- `wallet/0`, `wallet/1`: Gets or creates the node's wallet\r\n- `address/0`, `address/1`: Gets the address for a wallet\r\n- `topup/3`, `topup/4`: Helper for topping up a user's balance on a simple-pay node\r\n\r\n### Debugging and Utilities\r\n\r\n- `event/1` to `event/6`: Debugging event logging functions\r\n- `read/1`, `read/2`: Debug functions to read a message from the cache\r\n- `no_prod/3`: Utility to throw an error if production-ready code is executed in production mode\r\n- `now/0`: Gets the current time in milliseconds\r\n- `profile/1`: Starts a profiling session, runs a function, and analyzes the results\r\n- `debug_wait/4`: Waits for a specified time while printing a debug message\r\n- `benchmark/2`, `benchmark/3`: Runs a function multiple times to benchmark performance\r\n\r\n\n\n## Usage Patterns\r\n\r\nThe `hb` module exhibits several distinctive usage patterns:\r\n\r\n1. **System Entry Points**:\r\n   - The module provides primary entry points (`start_mainnet`, `start_simple_pay`) for starting a HyperBEAM node\r\n   - These functions handle application dependency startup, configuration, and service initialization\r\n\r\n2. **Wallet Management**:\r\n   - Functions for creating, loading, and managing cryptographic wallets\r\n   - Address derivation and display utilities\r\n\r\n3. **Debugging Infrastructure**:\r\n   - Extensive event logging framework with topic filtering\r\n   - Debug utilities for profiling, benchmarking, and message inspection\r\n   - Development-mode protection with `no_prod`\r\n\r\n4. **High-Level Documentation**:\r\n   - The module includes detailed documentation about system architecture\r\n   - Key subsystems are described at a conceptual level\r\n\r\n\n\n## Integration Points\r\n\r\n`hb` integrates with other components through several key mechanisms:\r\n\r\n1. **Application Control Flow**:\r\n   - Starts and configures the HTTP server\r\n   - Ensures required applications are started\r\n   - Initializes the debugging environment\r\n\r\n2. **Wallet Integration**:\r\n   - Loads and manages the node's cryptographic identity\r\n   - Provides utilities for working with wallet addresses\r\n\r\n3. **Payment System**:\r\n   - Configures payment processors for node services\r\n   - Provides a top-up mechanism for simple payments\r\n\r\n4. **Debug Event System**:\r\n   - Multi-level event logging with topic filtering\r\n   - Module annotation-based debug control\r\n\r\n\n\n## Code Snippets\r\n\r\n### Server Startup\r\n\r\n```erlang\r\nstart_mainnet(Opts) ->\r\n    application:ensure_all_started([\r\n        kernel,\r\n        stdlib,\r\n        inets,\r\n        ssl,\r\n        ranch,\r\n        cowboy,\r\n        gun,\r\n        prometheus,\r\n        prometheus_cowboy,\r\n        os_mon,\r\n        rocksdb\r\n    ]),\r\n    Wallet = hb:wallet(hb_opts:get(priv_key_location, no_viable_wallet_path, Opts)),\r\n    BaseOpts = hb_http_server:set_default_opts(Opts),\r\n    hb_http_server:start_node(\r\n        FinalOpts =\r\n            BaseOpts#{\r\n                store => #{ <<\"store-module\">> => hb_store_fs, <<\"prefix\">> => <<\"cache-mainnet\">> },\r\n                priv_wallet => Wallet\r\n            }\r\n    ),\r\n    % ... output information ...\r\n```\r\n\r\n### Wallet Management\r\n\r\n```erlang\r\nwallet(Location) ->\r\n    case file:read_file_info(Location) of\r\n        {ok, _} ->\r\n            ar_wallet:load_keyfile(Location);\r\n        {error, _} -> \r\n            Res = ar_wallet:new_keyfile(?DEFAULT_KEY_TYPE, Location),\r\n            ?event({created_new_keyfile, Location, address(Res)}),\r\n            Res\r\n    end.\r\n```\r\n\r\n### Event Logging\r\n\r\n```erlang\r\nevent(Topic, X, ModAtom, Func, Line, Opts) when is_atom(ModAtom) ->\r\n    % Check if the module has the `hb_debug' attribute set to `print'.\r\n    case lists:member({hb_debug, [print]}, ModAtom:module_info(attributes)) of\r\n        true -> hb_util:debug_print(X, atom_to_list(ModAtom), Func, Line);\r\n        false -> \r\n            % Check if the module has the `hb_debug' attribute set to `no_print'.\r\n            case lists:keyfind(hb_debug, 1, ModAtom:module_info(attributes)) of\r\n                {hb_debug, [no_print]} -> X;\r\n                _ -> event(Topic, X, atom_to_list(ModAtom), Func, Line, Opts)\r\n            end\r\n    end;\r\n```",
  "description": "`hb.erl` is the central entry point and application module in HyperBEAM. It provides a high-level interface to the system, application initialization, server startup capabilities, wallet management, and debugging utilities.",
  "hasCode": true
}