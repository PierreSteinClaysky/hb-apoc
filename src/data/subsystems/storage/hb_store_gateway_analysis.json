{
  "name": "`hb_store_gateway",
  "subsystem": "storage",
  "filename": "hb_store_gateway.erl",
  "content": "# `hb_store_gateway.erl` Analysis\r\n\r\n\n\n## Overview\r\n\r\n`hb_store_gateway.erl` serves as a bridge between HyperBEAM and external data sources, primarily Arweave's gateway and GraphQL routes. Unlike the filesystem implementation, this module provides a remote storage interface that retrieves data from network sources while offering optional local caching for performance optimization.\r\n\r\nThis implementation demonstrates how HyperBEAM's storage abstraction can extend beyond local storage to include remote data sources, effectively making distributed content appear as part of the same unified storage interface.\r\n\r\n\n\n## Key Characteristics\r\n\r\n- **Remote Data Access**: Provides access to data stored on the Arweave network\r\n- **ID-Based Retrieval**: Operates specifically on keys that are valid HyperBEAM IDs\r\n- **Optional Local Caching**: Can cache remote data in a local store for performance\r\n- **Read-Only Interface**: Primarily focused on reading remote data rather than writing\r\n- **GraphQL Integration**: Works with Arweave's GraphQL API for data retrieval\r\n- **Remote Scope**: Explicitly marked as a 'remote' scope in the storage ecosystem\r\n\r\n\n\n## Dependencies\r\n\r\n### Upstream Dependencies\r\n\r\n- `hb_gateway_client`: Used to read data from the remote gateway\r\n- `hb_path`: Used for path manipulation\r\n- `hb_message`: Used for message processing and matching\r\n- `hb_private`: Used for internal message manipulation\r\n- `hb_cache`: Used for caching mechanisms\r\n- `hb_opts`: Used for configuration options\r\n- `include/hb.hrl`: System-wide macros and definitions\r\n- `eunit/include/eunit.hrl`: Testing framework includes\r\n\r\n\n\n## Implementation Details\r\n\r\n### Remote Scope Definition\r\n\r\n```erlang\r\nscope(_) -> remote.\r\n```\r\n\r\nThis simple function marks all instances of this store as having 'remote' scope, which is used by the storage system to categorize and prioritize stores.\r\n\r\n### Read Operation\r\n\r\n```erlang\r\nread(StoreOpts, Key) ->\r\n    case hb_path:term_to_path_parts(Key) of\r\n        [ID] when ?IS_ID(ID) ->\r\n            ?event({read, StoreOpts, Key}),\r\n            case hb_gateway_client:read(Key, StoreOpts) of\r\n                {error, _} -> not_found;\r\n                {ok, Message} ->\r\n                    ?event(remote_read, {got_message_from_gateway, Message}),\r\n                    maybe_cache(StoreOpts, Message),\r\n                    {ok, Message}\r\n            end;\r\n        _ ->\r\n            ?event({ignoring_non_id, Key}),\r\n            not_found\r\n    end.\r\n```\r\n\r\nThe read operation:\r\n1. Checks if the key is a single ID (not a path)\r\n2. Uses `hb_gateway_client:read/2` to fetch data from the remote gateway\r\n3. Optionally caches the retrieved data locally for future use\r\n4. Returns the message or `not_found`\r\n\r\n### Type Determination\r\n\r\n```erlang\r\ntype(StoreOpts, Key) ->\r\n    ?event({type, StoreOpts, Key}),\r\n    case read(StoreOpts, Key) of\r\n        not_found -> not_found;\r\n        {ok, Data} ->\r\n            ?event({type, hb_private:reset(hb_message:unattested(Data))}),\r\n            IsFlat = lists:all(\r\n                fun({_, Value}) -> not is_map(Value) end,\r\n                maps:to_list(hb_private:reset(hb_message:unattested(Data)))\r\n            ),\r\n            if\r\n                IsFlat -> simple;\r\n                true -> composite\r\n            end\r\n    end.\r\n```\r\n\r\nThe type functionality:\r\n1. Reads the data from the remote source\r\n2. Examines the structure of the message\r\n3. Returns 'simple' if all fields are non-maps, 'composite' otherwise\r\n\r\n### Caching Mechanism\r\n\r\n```erlang\r\nmaybe_cache(StoreOpts, Data) ->\r\n    ?event({maybe_cache, StoreOpts, Data}),\r\n    % Check for store in both the direct map and the legacy opts map\r\n    Store = case maps:get(<<\"store\">>, StoreOpts, not_found) of\r\n        not_found -> \r\n            % Check in legacy opts format\r\n            NestedOpts = maps:get(<<\"opts\">>, StoreOpts, #{}),\r\n            hb_opts:get(store, false, NestedOpts);\r\n        FoundStore -> \r\n            FoundStore\r\n    end,\r\n    \r\n    case Store of\r\n        false -> do_nothing;\r\n        Store ->\r\n            ?event({writing_message_to_local_cache, Data}),\r\n            case hb_cache:write(Data, #{ store => Store}) of\r\n                {ok, _} -> Data;\r\n                {error, Err} ->\r\n                    ?event(warning, {error_writing_to_local_gteway_cache, Err}),\r\n                    Data\r\n            end\r\n    end.\r\n```\r\n\r\nThe caching system:\r\n1. Looks for a store configuration in the options (in both new and legacy formats)\r\n2. If a store is configured, writes the data to that store via `hb_cache:write/2`\r\n3. Handles errors while continuing operation (degraded performance but not failure)\r\n\r\n### Listing and Path Resolution\r\n\r\n```erlang\r\nlist(StoreOpts, Key) ->\r\n    case read(StoreOpts, Key) of\r\n        {error, _} -> not_found;\r\n        {ok, Message} -> {ok, maps:keys(Message)}\r\n    end.\r\n\r\nresolve(_, Key) -> Key.\r\n```\r\n\r\nThe implementation provides simplified listing (returning keys from a message) and a no-op `resolve` that simply returns the key unchanged, indicating no link resolution is performed.\r\n\r\n\n\n## Tests\r\n\r\nThe module includes extensive tests that demonstrate various usage scenarios:\r\n\r\n1. **Basic Gateway Access**: Testing direct access to remote data\r\n2. **Caching Integration**: Testing the system with and without local caching\r\n3. **Route Filtering**: Ensuring route filtering controls work correctly\r\n4. **HTTP Integration**: Testing integration with the HTTP server\r\n5. **Converge Integration**: Testing how gateway data can be used in message resolution\r\n\r\nThese tests provide valuable insight into the module's integration with other parts of HyperBEAM.\r\n\r\n\n\n## Integration with Other Subsystems\r\n\r\n### Integration with Gateway Client\r\n\r\nThe module uses `hb_gateway_client:read/2` for actual data retrieval, showing a clear separation of concerns between the storage abstraction and the network communication details.\r\n\r\n### Integration with Cache System\r\n\r\nThe optional caching mechanism demonstrates integration with the cache subsystem, providing a performance optimization layer.\r\n\r\n### Integration with Converge Protocol\r\n\r\nThe tests demonstrate how gateway-retrieved data can be used with the Converge Protocol through `hb_converge:resolve/3`, showing the seamless integration between remote data and local processing.",
  "description": "`hb_store_gateway.erl` serves as a bridge between HyperBEAM and external data sources, primarily Arweave's gateway and GraphQL routes. Unlike the filesystem implementation, this module provides a remote storage interface that retrieves data from network sources while offering optional local caching for performance optimization.",
  "hasCode": true
}