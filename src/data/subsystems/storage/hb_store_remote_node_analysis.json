{
  "name": "`hb_store_remote_node",
  "subsystem": "storage",
  "filename": "hb_store_remote_node.erl",
  "content": "# `hb_store_remote_node.erl` Analysis\r\n\r\n\n\n## Overview\r\n\r\n`hb_store_remote_node.erl` provides a store implementation that fetches data from other HyperBEAM nodes over HTTP. Unlike the previously analyzed storage implementations, this module explicitly provides only the read side of the store interface, functioning as a client adapter for remote HyperBEAM nodes.\r\n\r\nThis implementation enables a distributed storage architecture where nodes can access each other's data through the same unified storage abstraction, further extending HyperBEAM's ability to treat remote data sources as part of a cohesive storage system.\r\n\r\n\n\n## Key Characteristics\r\n\r\n- **Read-Only Implementation**: Only implements the read-side of the storage interface\r\n- **HTTP Communication**: Uses HyperBEAM's HTTP client to fetch data from remote nodes\r\n- **Remote Scope**: Explicitly marked as having a \"remote\" scope\r\n- **Message Attestation**: Ensures only attested portions of messages are returned\r\n- **Simplified Type System**: Considers all successfully retrieved data as \"simple\" type\r\n- **Node-to-Node Communication**: Enables data sharing between different HyperBEAM nodes\r\n\r\n\n\n## Dependencies\r\n\r\n### Upstream Dependencies\r\n\r\n- `hb_http`: Used to send HTTP requests to the remote node\r\n- `hb_message`: Used for message validation and attestation checking\r\n- `include/hb.hrl`: System-wide macros and definitions\r\n- `eunit/include/eunit.hrl`: Testing framework includes\r\n\r\n\n\n## Implementation Details\r\n\r\n### Remote Scope Definition\r\n\r\n```erlang\r\nscope(_) -> remote.\r\n```\r\n\r\nAs with the gateway implementation, this store is clearly marked as having a \"remote\" scope.\r\n\r\n### Read Operation\r\n\r\n```erlang\r\nread(Opts = #{ <<\"node\">> := Node }, Key) ->\r\n    ?event({reading, Key, Opts}),\r\n    case hb_http:get(Node, Key, Opts) of\r\n        {ok, Res} ->\r\n            {ok, Msg} = hb_message:with_only_attested(Res),\r\n            {ok, Msg};\r\n        {error, Err} ->\r\n            ?event({read_error, Key, Err}),\r\n            not_found\r\n    end.\r\n```\r\n\r\nThe read operation:\r\n1. Uses the configured node URL to form an HTTP request\r\n2. Fetches the data using `hb_http:get/3`\r\n3. Ensures that only the attested portions of the message are returned\r\n4. Returns the message or `not_found` on error\r\n\r\n### Type Determination\r\n\r\n```erlang\r\ntype(Opts = #{ <<\"node\">> := Node }, Key) ->\r\n    ?event({remote_type, Node, Key}),\r\n    case read(Opts, Key) of\r\n        not_found -> not_found;\r\n        _ -> simple\r\n    end.\r\n```\r\n\r\nThe implementation provides a simplified type system - all data that can be successfully retrieved is classified as \"simple\" type. This is a pragmatic approach that avoids needing to analyze the structure of remote data.\r\n\r\n### Path Resolution\r\n\r\n```erlang\r\nresolve(#{ <<\"node\">> := Node }, Key) ->\r\n    ?event({resolving_to_self, Node, Key}),\r\n    Key.\r\n```\r\n\r\nSimilar to `hb_store_gateway.erl`, this implementation uses a no-op `resolve` function that simply returns the key unchanged, indicating that path resolution isn't implemented.\r\n\r\n\n\n## Test\r\n\r\nThe module includes a single comprehensive test that demonstrates the intended data flow:\r\n\r\n1. It creates a local filesystem store\r\n2. Writes a message with random content to it\r\n3. Starts an HTTP server node using that store as its backing store\r\n4. Creates a remote store pointing to the HTTP server node\r\n5. Reads the message through the remote store\r\n6. Verifies that the content matches what was originally written\r\n\r\nThis test effectively shows how data can flow between different nodes in a distributed HyperBEAM setup.\r\n\r\n\n\n## Integration with Other Subsystems\r\n\r\n### Integration with HTTP System\r\n\r\nThe module relies heavily on the `hb_http` module for communication, showing the tight integration between the storage and network subsystems.\r\n\r\n### Integration with Message System\r\n\r\nThe use of `hb_message:with_only_attested/1` demonstrates integration with the messaging subsystem, particularly the security aspects of message handling.\r\n\r\n### Integration with Cache System\r\n\r\nWhile not directly shown in the code, the test demonstrates how this store implementation can be used with the cache system, allowing remote data to be accessed through the same cache interface as local data.\r\n\r\n\n\n## Implementation Notes\r\n\r\nThe module documentation mentions that a write side \"could be added\" to the interface, suggesting that this is a potential area for future development. The documentation also hints at integration with Arweave bundlers for data persistence, indicating a planned extension of the distributed storage capabilities.\r\n\r\nThe simplicity of this implementation compared to others suggests that it may be a newer or less mature component, possibly representing an area of ongoing development in the HyperBEAM system.",
  "description": "`hb_store_remote_node.erl` provides a store implementation that fetches data from other HyperBEAM nodes over HTTP. Unlike the previously analyzed storage implementations, this module explicitly provides only the read side of the store interface, functioning as a client adapter for remote HyperBEAM nodes.",
  "hasCode": true
}