{
  "name": "`hb_http_server",
  "subsystem": "network",
  "filename": "hb_http_server.erl",
  "content": "# `hb_http_server.erl` Analysis\r\n\r\n\n\n## Overview\r\n\r\n`hb_http_server.erl` implements the server-side component of HyperBEAM's HTTP functionality, exposing the Converge resolver to the web as an HTTP endpoint. This module acts as the bridge between HTTP clients and HyperBEAM's internal message-based processing, handling all aspects of the HTTP server lifecycle—from initialization and configuration to request processing and response generation.\r\n\r\nThe module builds upon the Cowboy web server library to provide HTTP/1.1, HTTP/2, and HTTP/3 support, while maintaining consistency with HyperBEAM's message-centric architecture. Rather than implementing custom HTTP request handlers for different endpoints, it transforms incoming HTTP requests into HyperBEAM messages, processes them through the Converge resolver, and converts the results back into proper HTTP responses.\r\n\r\nThis design allows developers to interact with HyperBEAM's functionality through standard HTTP requests, while internally maintaining the system's message-based paradigm.\r\n\r\n\n\n## Key Characteristics\r\n\r\n- **HTTP Server Management**: Handles initialization, configuration, and lifecycle of the HTTP server\r\n- **Protocol Support**: Offers HTTP/1.1, HTTP/2, and HTTP/3 support through configurable options\r\n- **Request Transformation**: Converts HTTP requests into HyperBEAM messages for processing\r\n- **Integration with Converge**: Routes converted requests to the Converge resolver for processing\r\n- **CORS Support**: Implements standard Cross-Origin Resource Sharing headers and preflight handling\r\n- **Configuration Loading**: Supports loading server configuration from external files\r\n- **Dynamic Options**: Allows updating server options at runtime\r\n- **Metrics Integration**: Includes support for Prometheus metrics collection\r\n- **Wallet Integration**: Associates a node wallet with the server for authentication purposes\r\n\r\n\n\n## Dependencies\r\n\r\n### Upstream Dependencies\r\n\r\n- `hb_http`: For message/HTTP conversion and HTTP response generation\r\n- `hb_converge`: For message resolution\r\n- `hb_opts`: For configuration management\r\n- `hb_util`: For utility functions\r\n- `hb_store`: For storage operations\r\n- `dev_meta`: For handling requests after HTTP conversion\r\n- `cowboy`: For the underlying HTTP server implementation\r\n- `cowboy_router`: For HTTP routing\r\n- `cowboy_req`: For HTTP request handling\r\n- `cowboy_static`: For serving static files\r\n- `prometheus_cowboy2_handler`, `prometheus_cowboy2_instrumenter`: For metrics collection\r\n- `ranch_server`: For low-level server management\r\n- `ar_wallet`: For wallet operations\r\n- `uri_string`: For URI manipulation\r\n\r\n\n\n## Implementation Details\r\n\r\n### Server Initialization\r\n\r\nThe module provides several functions for starting the HTTP server with different configuration options:\r\n\r\n```erlang\r\nstart() ->\r\n    % Load configuration, initialize wallet and store\r\n    % Display ASCII art banner with server information\r\n    % Start the server with the loaded configuration\r\n    \r\nstart(Opts) ->\r\n    % Ensure required applications are started\r\n    application:ensure_all_started([\r\n        kernel, stdlib, inets, ssl, ranch, cowboy, gun,\r\n        prometheus, prometheus_cowboy2, os_mon, rocksdb\r\n    ]),\r\n    hb:init(),\r\n    BaseOpts = set_default_opts(Opts),\r\n    {ok, Listener, _Port} = new_server(BaseOpts),\r\n    {ok, Listener}.\r\n```\r\n\r\nThe initialization process:\r\n1. Loads configuration from a file if specified\r\n2. Sets up a wallet for the node\r\n3. Initializes the required storage\r\n4. Starts all dependent applications\r\n5. Creates and starts the HTTP server with the specified options\r\n\r\n### Protocol Support\r\n\r\nThe module supports multiple HTTP protocol versions through dedicated startup functions:\r\n\r\n```erlang\r\nnew_server(RawNodeMsg) ->\r\n    % Prepare server configuration\r\n    % Determine which protocol to use\r\n    case Protocol = hb_opts:get(protocol, no_proto, NodeMsg) of\r\n        http3 ->\r\n            start_http3(ServerID, ProtoOpts, NodeMsg);\r\n        Pro when Pro =:= http2; Pro =:= http1 ->\r\n            % The HTTP/2 server has fallback mode to 1.1 as necessary\r\n            start_http2(ServerID, ProtoOpts, NodeMsg);\r\n        _ -> {error, {unknown_protocol, Protocol}}\r\n    end.\r\n```\r\n\r\nThe implementation includes specialized functions for HTTP/2 and HTTP/3:\r\n\r\n```erlang\r\nstart_http3(ServerID, ProtoOpts, _NodeMsg) ->\r\n    % Set up QUIC transport for HTTP/3\r\n    % Returns port and listener PID\r\n    \r\nstart_http2(ServerID, ProtoOpts, NodeMsg) ->\r\n    % Set up TCP transport for HTTP/2 (with HTTP/1.1 fallback)\r\n    % Returns port and listener PID\r\n```\r\n\r\n### Request Handling\r\n\r\nThe core functionality is implemented in the Cowboy handler callbacks:\r\n\r\n```erlang\r\ninit(Req, ServerID) ->\r\n    case cowboy_req:method(Req) of\r\n        <<\"OPTIONS\">> -> cors_reply(Req, ServerID);\r\n        _ ->\r\n            {ok, Body} = read_body(Req),\r\n            handle_request(Req, Body, ServerID)\r\n    end.\r\n```\r\n\r\nFor non-OPTIONS requests, the module:\r\n1. Reads the complete request body\r\n2. Retrieves the server options using the server ID\r\n3. Converts the HTTP request to a HyperBEAM message using `hb_http:req_to_tabm_singleton`\r\n4. Determines the appropriate codec for the response\r\n5. Processes the request through `dev_meta:handle`\r\n6. Converts the result back to an HTTP response using `hb_http:reply`\r\n\r\n```erlang\r\nhandle_request(Req, Body, ServerID) ->\r\n    NodeMsg = get_opts(#{ http_server => ServerID }),\r\n    % Parse the HTTP request into HyperBEAM's message format\r\n    ReqSingleton = hb_http:req_to_tabm_singleton(Req, Body, NodeMsg),\r\n    AttestationCodec = hb_http:accept_to_codec(ReqSingleton, NodeMsg),\r\n    % Process the request through the Meta device\r\n    {ok, Res} =\r\n        dev_meta:handle(\r\n            NodeMsg#{ attestation_device => AttestationCodec },\r\n            ReqSingleton\r\n        ),\r\n    % Convert the result back to an HTTP response\r\n    hb_http:reply(Req, ReqSingleton, Res, NodeMsg).\r\n```\r\n\r\n### Configuration Management\r\n\r\nThe module provides functions for setting and retrieving server options:\r\n\r\n```erlang\r\nset_opts(Opts) ->\r\n    ServerRef = hb_opts:get(http_server, no_server_ref, Opts),\r\n    ok = cowboy:set_env(ServerRef, node_msg, Opts).\r\n\r\nget_opts(NodeMsg) ->\r\n    ServerRef = hb_opts:get(http_server, no_server_ref, NodeMsg),\r\n    cowboy:get_env(ServerRef, node_msg, no_node_msg).\r\n```\r\n\r\nIt also includes a function for setting default options if none are provided:\r\n\r\n```erlang\r\nset_default_opts(Opts) ->\r\n    % Create a temporary opts map that does not include the defaults\r\n    TempOpts = Opts#{ only => local },\r\n    % Generate a random port number if none is specified\r\n    % Create a wallet if none is provided\r\n    % Set up a store if none is configured\r\n    % Return the updated options\r\n```\r\n\r\n### CORS Support\r\n\r\nThe module includes specific handling for CORS preflight requests:\r\n\r\n```erlang\r\ncors_reply(Req, _ServerID) ->\r\n    Req2 = cowboy_req:reply(204, #{\r\n        <<\"access-control-allow-origin\">> => <<\"*\">>,\r\n        <<\"access-control-allow-headers\">> => <<\"*\">>,\r\n        <<\"access-control-allow-methods\">> =>\r\n            <<\"GET, POST, PUT, DELETE, OPTIONS, PATCH\">>\r\n    }, Req),\r\n    {ok, Req2, no_state}.\r\n```\r\n\r\n### Testing Support\r\n\r\nThe module includes functions for starting a test node:\r\n\r\n```erlang\r\nstart_node() ->\r\n    start_node(#{}).\r\nstart_node(Opts) ->\r\n    % Initialize the required applications\r\n    % Start the supervisor\r\n    % Start the server with default options\r\n    % Return the URL for the node\r\n```\r\n\r\n\n\n## Integration with Other Subsystems\r\n\r\n### Integration with Core Infrastructure\r\n\r\n- Uses `hb_converge` for message resolution\r\n- Uses `hb_opts` for configuration management\r\n- Uses `hb:init()` for system initialization\r\n- Uses `hb:wallet()` for wallet management\r\n\r\n### Integration with Storage Subsystem\r\n\r\n- Uses `hb_store:start` to initialize the storage subsystem\r\n- Configures storage options for the server\r\n\r\n### Integration with Device Subsystem\r\n\r\n- Uses `dev_meta:handle` to process requests after HTTP conversion\r\n- Integrates with the device system for message handling\r\n\r\n### Integration with Arweave Subsystem\r\n\r\n- Uses `ar_wallet` for wallet operations\r\n- Integrates with Arweave for identity and cryptography",
  "description": "`hb_http_server.erl` implements the server-side component of HyperBEAM's HTTP functionality, exposing the Converge resolver to the web as an HTTP endpoint. This module acts as the bridge between HTTP clients and HyperBEAM's internal message-based processing, handling all aspects of the HTTP server lifecycle—from initialization and configuration to request processing and response generation.",
  "hasCode": true
}