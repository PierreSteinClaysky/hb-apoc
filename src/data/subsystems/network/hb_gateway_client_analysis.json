{
  "name": "`hb_gateway_client",
  "subsystem": "network",
  "filename": "hb_gateway_client.erl",
  "content": "# `hb_gateway_client.erl` Analysis\r\n\r\n\n\n## Overview\r\n\r\n`hb_gateway_client.erl` provides specialized client functionality for interacting with Arweave's blockchain network through both its GraphQL API and direct gateway endpoints. The module serves as a bridge between HyperBEAM and Arweave data storage, enabling the retrieval and conversion of blockchain transactions into HyperBEAM's internal message format.\r\n\r\nAs noted in its documentation, this module is considered transitional and may be deprecated once \"Arweave gateways integrate serving in `httpsig@1.0` form.\" This suggests that its current implementation addresses a temporary gap in the Arweave gateway functionality, specifically the ability to retrieve complete transactions in a format compatible with HyperBEAM's message system.\r\n\r\nThe module focuses on two primary tasks:\r\n1. Retrieving transaction data from Arweave through GraphQL queries and REST endpoints\r\n2. Converting the retrieved data into HyperBEAM's structured message format\r\n\r\n\n\n## Key Characteristics\r\n\r\n- **GraphQL Integration**: Implements queries to Arweave's GraphQL API to retrieve transaction metadata\r\n- **Raw Data Retrieval**: Fetches transaction data from Arweave gateways' raw endpoints\r\n- **Format Conversion**: Transforms Arweave transaction data into HyperBEAM messages\r\n- **Verification Logic**: Includes verification mechanisms for confirming data integrity\r\n- **Trust Configuration**: Provides options for handling unverifiable transactions\r\n- **Specialized Queries**: Includes application-specific queries like scheduler location lookup\r\n- **Dual-API Approach**: Combines GraphQL (for metadata) with REST (for content) to build complete messages\r\n\r\n\n\n## Dependencies\r\n\r\n### Upstream Dependencies\r\n\r\n- `hb_http`: For making HTTP requests to Arweave gateways and GraphQL endpoints\r\n- `hb_converge`: For message navigation and key operations\r\n- `hb_util`: For utility functions, particularly encoding and decoding\r\n- `hb_opts`: For configuration access\r\n- `jiffy`: For JSON encoding and decoding\r\n- `dev_codec_ans104`: For converting Arweave transactions to TABM format\r\n- `dev_codec_structured`: For converting TABM to structured format\r\n- `ar_bundles`: For transaction verification\r\n\r\n\n\n## Implementation Details\r\n\r\n### GraphQL Interaction\r\n\r\nThe module implements GraphQL queries to retrieve transaction metadata:\r\n\r\n```erlang\r\nread(ID, Opts) ->\r\n    Query =\r\n        #{\r\n            <<\"query\">> =>\r\n                <<\r\n                    \"query($transactionIds: [ID!]!) { \",\r\n                        \"transactions(ids: $transactionIds, first: 1){ \",\r\n                            \"edges { \", (item_spec())/binary , \" } \",\r\n                        \"} \",\r\n                    \"} \"\r\n                >>,\r\n            <<\"variables\">> =>\r\n                #{\r\n                    <<\"transactionIds\">> => [hb_util:human_id(ID)]\r\n                }\r\n        },\r\n    % Execute query and process results...\r\n```\r\n\r\nThe GraphQL schema includes fields needed to reconstruct an Arweave transaction:\r\n\r\n```erlang\r\nitem_spec() ->\r\n    <<\"node { \",\r\n        \"id \",\r\n        \"anchor \",\r\n        \"signature \",\r\n        \"recipient \",\r\n        \"owner { key } \",\r\n        \"fee { winston } \",\r\n        \"quantity { winston } \",\r\n        \"tags { name value } \",\r\n        \"data { size } \"\r\n    \"}\">>.\r\n```\r\n\r\nThe `query/2` function handles the actual GraphQL request:\r\n\r\n```erlang\r\nquery(Query, Opts) ->\r\n    Res = hb_http:request(\r\n        #{\r\n            % Add options for the HTTP request...\r\n            <<\"method\">> => <<\"POST\">>,\r\n            <<\"path\">> => <<\"/graphql\">>,\r\n            <<\"content-type\">> => <<\"application/json\">>,\r\n            <<\"body\">> => jiffy:encode(Query)\r\n        },\r\n        Opts\r\n    ),\r\n    % Process response...\r\n```\r\n\r\n### Raw Data Retrieval\r\n\r\nThe module retrieves transaction data from Arweave gateways' raw endpoints:\r\n\r\n```erlang\r\ndata(ID, Opts) ->\r\n    Req = #{\r\n        <<\"multirequest-accept-status\">> => 200,\r\n        <<\"multirequest-responses\">> => 1,\r\n        <<\"path\">> => <<\"/raw/\", ID/binary>>,\r\n        <<\"method\">> => <<\"GET\">>\r\n    },\r\n    case hb_http:request(Req, Opts) of\r\n        {ok, Res} ->\r\n            % Process successful response...\r\n        Res ->\r\n            % Handle error...\r\n    end.\r\n```\r\n\r\n### Message Conversion\r\n\r\nThe module converts Arweave transaction data to HyperBEAM's message format:\r\n\r\n```erlang\r\nresult_to_message(ExpectedID, Item, Opts) ->\r\n    GQLOpts = Opts#{ hashpath => ignore },\r\n    % Get the transaction data...\r\n    \r\n    % Convert to ANS-104 message format\r\n    TX =\r\n        #tx {\r\n            format = ans104,\r\n            id = hb_util:decode(ExpectedID),\r\n            last_tx = normalize_null(hb_converge:get(<<\"anchor\">>, Item, GQLOpts)),\r\n            signature =\r\n                hb_util:decode(hb_converge:get(<<\"signature\">>, Item, GQLOpts)),\r\n            % Additional fields...\r\n        },\r\n    \r\n    % Convert ANS-104 to TABM format\r\n    TABM = dev_codec_ans104:from(TX),\r\n    \r\n    % Convert TABM to structured format\r\n    Structured = dev_codec_structured:to(TABM),\r\n    \r\n    % Verify and potentially modify the message...\r\n```\r\n\r\nThe conversion process involves:\r\n1. Retrieving transaction metadata from GraphQL results\r\n2. Fetching the transaction data from gateway endpoints\r\n3. Constructing an ANS-104 format transaction record\r\n4. Converting the transaction to TABM format\r\n5. Converting TABM to HyperBEAM's structured format\r\n6. Verifying the transaction and handling trust decisions\r\n\r\n### Verification and Trust Handling\r\n\r\nThe module includes verification logic and trust configuration:\r\n\r\n```erlang\r\nEmbedded =\r\n    case ar_bundles:verify_item(TX) of\r\n        true ->\r\n            % Transaction verifies successfully...\r\n            Structured;\r\n        _ ->\r\n            % Transaction doesn't verify, check trust configuration...\r\n            case hb_opts:get(ans104_trust_gql, false, Opts) of\r\n                false ->\r\n                    % Don't trust unverified transactions...\r\n                    Structured;\r\n                true ->\r\n                    % Trust GraphQL results despite verification failure...\r\n                    % Add trusted keys to the attestation...\r\n            end\r\n    end,\r\n```\r\n\r\nThis allows for handling cases where the transaction doesn't verify cryptographically, with a configuration option to still trust GraphQL results if needed.\r\n\r\n### Specialized Queries\r\n\r\nThe module includes application-specific queries:\r\n\r\n```erlang\r\nscheduler_location(Address, Opts) ->\r\n    Query =\r\n        #{\r\n            <<\"query\">> =>\r\n                <<\"query($SchedulerAddrs: [String!]!) { \",\r\n                    \"transactions(owners: $SchedulerAddrs, tags: { name: \\\"Type\\\" values: [\\\"Scheduler-Location\\\"] }, first: 1){ \",\r\n                        \"edges { \",\r\n                            (item_spec())/binary ,\r\n                        \" } \",\r\n                    \"} \",\r\n                \"}\">>,\r\n            % Additional query parameters...\r\n        },\r\n    % Execute query and process results...\r\n```\r\n\r\nThis specialized query locates scheduler information based on an address, demonstrating how the module is used for specific application needs.\r\n\r\n\n\n## Integration with Other Subsystems\r\n\r\n### Integration with Network Communication Subsystem\r\n\r\n- Uses `hb_http` to make HTTP requests to Arweave gateways and GraphQL endpoints\r\n- Provides higher-level access patterns on top of the basic HTTP functionality\r\n- Handles specific network communication concerns for Arweave interaction\r\n\r\n### Integration with Core Infrastructure\r\n\r\n- Uses `hb_converge` for message navigation and key operations\r\n- Uses `hb_util` for utility functions\r\n- Uses `hb_opts` for configuration access\r\n\r\n### Integration with Arweave Subsystem\r\n\r\n- Interfaces directly with Arweave's GraphQL API and gateway endpoints\r\n- Works with Arweave-specific transaction formats\r\n- Uses `ar_bundles` for transaction verification\r\n- Implements specialized queries for Arweave-specific concepts like scheduler location\r\n\r\n### Integration with Codec Subsystem\r\n\r\n- Uses `dev_codec_ans104` and `dev_codec_structured` for format conversions\r\n- Bridges between Arweave's data format and HyperBEAM's message format",
  "description": "`hb_gateway_client.erl` provides specialized client functionality for interacting with Arweave's blockchain network through both its GraphQL API and direct gateway endpoints. The module serves as a bridge between HyperBEAM and Arweave data storage, enabling the retrieval and conversion of blockchain transactions into HyperBEAM's internal message format.",
  "hasCode": true
}